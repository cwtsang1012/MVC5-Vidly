@model dynamic

@{
    ViewBag.Title = "New Rental Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Rental Form</h2>


<form id="newRental">
    <!--div.form-group>label+input[type='text'].form-control -->
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <!--data-rule-validCustomer is defined in jQuery.validate plugin, see below-->
            <input id="customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" data-rule-validMovies="true" type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 col-sm-4">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>

    <button class="btn btn-primary">Submit</button>
</form>

@section scripts
{
    @* The address of jqueryval can be found in BundleConfig.cs *@
    @Scripts.Render("~/bundles/jqueryval");

    <script>
        $(document).ready(function () {
            //vm stands for view model on client side
            //view model in server is used to encapsulate data for a given view
            var vm = {
                MovieIds : [] // initial this property as an array, otherwise it will throw exception
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                //typeahead will query the server if user types at least 3 characters
                minLength: 3,
                //the characters in the search result that matched our query will be bold
                highlight: true
            }, {
                    name: 'customers',
                    display: 'name',
                    source: customers //which is defined in above bloodhound 
                }).on("typeahead:select", function (e, customer) {
                    //e for the event, customer = selected customer

                    //Later when the user submit the form, you're going to send this vm.CustomerID to Web API
                    vm.CustomerID = customer.id;
                });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                //typeahead will query the server if user types at least 3 characters
                minLength: 3,
                //the characters in the search result that matched our query will be bold
                highlight: true
            }, {
                    name: 'movies',
                    display: 'name',
                    source: movies //which is defined in above bloodhound 
                }).on("typeahead:select", function (e, movie) {
                    //e for the event, customer = selected customer

                    //for better coding, use data binding like angular, react, vue that don't write any html markup
                    if ($.inArray(movie.id, vm.MovieIds) > -1) {
                        toastr.info("The movie is already selected.");
                        $('#movie').typeahead("val", "");
                    }
                    else
                    {
                        $('#movies').append("<li class='list-group-item'>" + movie.name + "</li>");

                        $('#movie').typeahead("val", "");

                        vm.MovieIds.push(movie.id);
                    }
                });

            //custom validators
            //lst Parameter: name of validator; 2nd Parameter: validated function implementation, 3rd Parameter: Error Message
            $.validator.addMethod("validCustomer", function () {
                return vm.CustomerID && vm.CustomerID !== 0;
            }, "Please select a valid Customer.");

            $.validator.addMethod("validMovies", function () {
                return vm.MovieIds.length >= 1;
            }, "Please select at least one movie.");

            //form validation
            $('#newRental').validate({
                submitHandler: function (e) {
                    //Prevent the form submitting normally
                    e.preventDefault();

                    $.ajax({
                        url: "../api/NewRentals",
                        method: "post",
                        data: vm
                    })
                    .done(function () {
                        toastr.success("Rentals successfully recorded.");
                    })
                    .fail(function () {
                        toastr.fail("Something unexpected happened.");
                    });
                }
            });

            //If no validation on the form => use below code to handle form submission.
            /*
            $('#newRental').submit(function (e) {
                
            });
            */
        });
    </script>
}
