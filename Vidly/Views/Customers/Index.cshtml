@*

    +    Note: I've set the model for this view to IEnumerable<Customer>.
    +    This is a simple interface implemented by the list class. Since
    +    in this view we only want to iterate over this list, and we don't
    +    need any of the operations in the List class (eg Add, Remove, etc),
    +    it's better to use the IEnumerable interface, which allows use to
    +    iterate over the list. If in the future, we replace the List with a
    +    different data structure, as long as it is enumerable, our view code
    +    will remain unchanged.

*@

@model IEnumerable<Vidly.Models.Customer>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Customers</h2>

<div style="margin-bottom: 10px;">
    <a id="newCustomer" class="btn btn-primary" href="~/Customers/New">New Customer</a>
</div>

<table id="customers" class="table table-bordered table-hover" style="margin-top: 8px;">
    <thead>
        <tr>
            <th><span style="font-size: 16px;">Customer</span></th>
            <th><span style="font-size: 16px;">Membership Type</span></th>
            <th><span style="font-size 16px;">Delete?</span></th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

@section scripts{
    <script>
        $(document).ready(function () {
            var table = $('#customers').DataTable({
                ajax: {
                    url: '/api/Customers',
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "name",       //Due to Camel Notation, all properties are started with lowercase
                        render: function (data, type, customer) {
                            return "<a href='/customer/edit/" + customer.id + "'>" + customer.name + "</a>";
                        }
                    },
                    {
                        data: "membershipType.name"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-customer-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            }); //simply way to jquery.datatables

            $('#customers').on("click", ".js-delete", function () {
                var button = $(this);
                bootbox.confirm("Are you sure you want to delete this customer?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/customers/" + button.attr("data-customer-id"),
                            method: "DELETE",
                            success: function () {
                                // remove the tr element from the dom only
                                //the customer still exists (data table has no change) and can be searched.
                                //button.parents("tr").remove();

                                // solution: remove the corresonding customer from the internal list of our data table
                                // and then tell data table to redraw itself.
                                table.row(button.parents("tr")).remove().draw(true);
                            }
                        });
                    }

                });
            });
        });
    </script>
}